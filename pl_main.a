; droneMON PLAYER CODE

; This file is autogenerated by py_makeplayer.py and deleted when issuing a make clean,
; so please don't mess with it directly. Make changes in the python script instead.

;Design choice: No sidbuffer (parameters make variation possible instead)

;============================
;Config constants

PL_NUMCHANNELS = 9
PL_NUMSIDCHANNELS = 6
PL_NUMSONGPOSITIONS = 256

;Global (for all channels) variables
PL_ZP_START = $02	;1 bytes
PL_ZP_TICKCOUNTER = $03	;1 bytes
PL_ZP_SEQPOS = $04	;1 bytes

;Sequence pointers
PL_ZP_CHN00 = $05	;2 bytes
PL_ZP_CHN01 = $07	;2 bytes
PL_ZP_CHN02 = $09	;2 bytes
PL_ZP_CHN03 = $0B	;2 bytes
PL_ZP_CHN04 = $0D	;2 bytes
PL_ZP_CHN05 = $0F	;2 bytes
PL_ZP_CHN06 = $11	;2 bytes
PL_ZP_CHN07 = $13	;2 bytes
PL_ZP_CHN08 = $15	;2 bytes

;Delay counters (separate for each channel)
PL_ZP_CHN00_DELAY = $17	;1 bytes
PL_ZP_CHN01_DELAY = $18	;1 bytes
PL_ZP_CHN02_DELAY = $19	;1 bytes
PL_ZP_CHN03_DELAY = $1A	;1 bytes
PL_ZP_CHN04_DELAY = $1B	;1 bytes
PL_ZP_CHN05_DELAY = $1C	;1 bytes
PL_ZP_CHN06_DELAY = $1D	;1 bytes
PL_ZP_CHN07_DELAY = $1E	;1 bytes
PL_ZP_CHN08_DELAY = $1F	;1 bytes

;Song position counters (separate for each channel, to allow for Ableton Live mode style)
PL_ZP_CHN00_SONGPOS = $20	;1 bytes
PL_ZP_CHN01_SONGPOS = $21	;1 bytes
PL_ZP_CHN02_SONGPOS = $22	;1 bytes
PL_ZP_CHN03_SONGPOS = $23	;1 bytes
PL_ZP_CHN04_SONGPOS = $24	;1 bytes
PL_ZP_CHN05_SONGPOS = $25	;1 bytes
PL_ZP_CHN06_SONGPOS = $26	;1 bytes
PL_ZP_CHN07_SONGPOS = $27	;1 bytes
PL_ZP_CHN08_SONGPOS = $28	;1 bytes

;Sequence position counters (separate for each channel)
PL_ZP_CHN00_SEQPOS = $29	;1 bytes
PL_ZP_CHN01_SEQPOS = $2A	;1 bytes
PL_ZP_CHN02_SEQPOS = $2B	;1 bytes
PL_ZP_CHN03_SEQPOS = $2C	;1 bytes
PL_ZP_CHN04_SEQPOS = $2D	;1 bytes
PL_ZP_CHN05_SEQPOS = $2E	;1 bytes
PL_ZP_CHN06_SEQPOS = $2F	;1 bytes
PL_ZP_CHN07_SEQPOS = $30	;1 bytes
PL_ZP_CHN08_SEQPOS = $31	;1 bytes

;Multispeed coefficients (separately for each channel)
PL_ZP_CHN00_MULSPEED = $32	;1 bytes
PL_ZP_CHN01_MULSPEED = $33	;1 bytes
PL_ZP_CHN02_MULSPEED = $34	;1 bytes
PL_ZP_CHN03_MULSPEED = $35	;1 bytes
PL_ZP_CHN04_MULSPEED = $36	;1 bytes
PL_ZP_CHN05_MULSPEED = $37	;1 bytes
PL_ZP_CHN06_MULSPEED = $38	;1 bytes
PL_ZP_CHN07_MULSPEED = $39	;1 bytes
PL_ZP_CHN08_MULSPEED = $3A	;1 bytes

;Current base NOTE
PL_ZP_CHN00_BASENOTE = $3B	;1 bytes
PL_ZP_CHN01_BASENOTE = $3C	;1 bytes
PL_ZP_CHN02_BASENOTE = $3D	;1 bytes
PL_ZP_CHN03_BASENOTE = $3E	;1 bytes
PL_ZP_CHN04_BASENOTE = $3F	;1 bytes
PL_ZP_CHN05_BASENOTE = $40	;1 bytes
PL_ZP_CHN06_BASENOTE = $41	;1 bytes
PL_ZP_CHN07_BASENOTE = $42	;1 bytes
PL_ZP_CHN08_BASENOTE = $43	;1 bytes

;Current relative NOTE
PL_ZP_CHN00_RELNOTE = $44	;1 bytes
PL_ZP_CHN01_RELNOTE = $45	;1 bytes
PL_ZP_CHN02_RELNOTE = $46	;1 bytes
PL_ZP_CHN03_RELNOTE = $47	;1 bytes
PL_ZP_CHN04_RELNOTE = $48	;1 bytes
PL_ZP_CHN05_RELNOTE = $49	;1 bytes
PL_ZP_CHN06_RELNOTE = $4A	;1 bytes
PL_ZP_CHN07_RELNOTE = $4B	;1 bytes
PL_ZP_CHN08_RELNOTE = $4C	;1 bytes

;Current SC1 (Sound Chunk #1)
PL_ZP_CHN00_SC1 = $4D	;1 bytes
PL_ZP_CHN01_SC1 = $4E	;1 bytes
PL_ZP_CHN02_SC1 = $4F	;1 bytes
PL_ZP_CHN03_SC1 = $50	;1 bytes
PL_ZP_CHN04_SC1 = $51	;1 bytes
PL_ZP_CHN05_SC1 = $52	;1 bytes
PL_ZP_CHN06_SC1 = $53	;1 bytes
PL_ZP_CHN07_SC1 = $54	;1 bytes
PL_ZP_CHN08_SC1 = $55	;1 bytes

;Current SC1 ORIGINAL POSITION (Sound Chunk #1)
PL_ZP_CHN00_SC1_ORGPOS = $56	;1 bytes
PL_ZP_CHN01_SC1_ORGPOS = $57	;1 bytes
PL_ZP_CHN02_SC1_ORGPOS = $58	;1 bytes
PL_ZP_CHN03_SC1_ORGPOS = $59	;1 bytes
PL_ZP_CHN04_SC1_ORGPOS = $5A	;1 bytes
PL_ZP_CHN05_SC1_ORGPOS = $5B	;1 bytes
PL_ZP_CHN06_SC1_ORGPOS = $5C	;1 bytes
PL_ZP_CHN07_SC1_ORGPOS = $5D	;1 bytes
PL_ZP_CHN08_SC1_ORGPOS = $5E	;1 bytes

;Current SC2 (Sound Chunk #2)
PL_ZP_CHN00_SC2 = $5F	;1 bytes
PL_ZP_CHN01_SC2 = $60	;1 bytes
PL_ZP_CHN02_SC2 = $61	;1 bytes
PL_ZP_CHN03_SC2 = $62	;1 bytes
PL_ZP_CHN04_SC2 = $63	;1 bytes
PL_ZP_CHN05_SC2 = $64	;1 bytes
PL_ZP_CHN06_SC2 = $65	;1 bytes
PL_ZP_CHN07_SC2 = $66	;1 bytes
PL_ZP_CHN08_SC2 = $67	;1 bytes

;Keep track of current MIDI program used in this channel (0-15)
PL_ZP_CHN00_MIDI_PROGRAM = $68	;1 bytes
PL_ZP_CHN01_MIDI_PROGRAM = $69	;1 bytes
PL_ZP_CHN02_MIDI_PROGRAM = $6A	;1 bytes
PL_ZP_CHN03_MIDI_PROGRAM = $6B	;1 bytes
PL_ZP_CHN04_MIDI_PROGRAM = $6C	;1 bytes
PL_ZP_CHN05_MIDI_PROGRAM = $6D	;1 bytes
PL_ZP_CHN06_MIDI_PROGRAM = $6E	;1 bytes
PL_ZP_CHN07_MIDI_PROGRAM = $6F	;1 bytes
PL_ZP_CHN08_MIDI_PROGRAM = $70	;1 bytes

;MIDI VELOCITY for each channel
;Default velocity is 100 (max is 127)
PL_ZP_CHN00_MIDI_VELOCITY = $71	;1 bytes
PL_ZP_CHN01_MIDI_VELOCITY = $72	;1 bytes
PL_ZP_CHN02_MIDI_VELOCITY = $73	;1 bytes
PL_ZP_CHN03_MIDI_VELOCITY = $74	;1 bytes
PL_ZP_CHN04_MIDI_VELOCITY = $75	;1 bytes
PL_ZP_CHN05_MIDI_VELOCITY = $76	;1 bytes
PL_ZP_CHN06_MIDI_VELOCITY = $77	;1 bytes
PL_ZP_CHN07_MIDI_VELOCITY = $78	;1 bytes
PL_ZP_CHN08_MIDI_VELOCITY = $79	;1 bytes

PL_ZP_END = $7A

;============================
pl_main:

    ;SEND MIDI-CLOCK MESSAGE (ALWAYS 3 ticks per step to fit 24ppqn: pulses per quarter note)
    ;
    ; ...och.!!! Är inte det skitbra för pretrig-grejen? Då triggar man helt enkelt pretrigz
    ; ett STEG innan


    ;---------------------------
    ; Sequence parsing

		;--------------------
		;Här ska det vara nån tick/step/groove-nånting-kod.
		;Mnja.. Det ska vara shufflespeed mha timerinterruptsen istället.
		;Both MIDI and DIN Sync clocks are sent at a rate of 24 ppqn (pulses per quarter note).
		;a Roland compatible device playing sixteenth notes would have to advance to
		;the next note every time it receives 6 pulses.





		;First check for sequence break (which is when tickcounter = 0)
;		dec PL_ZP_TICKCOUNTER	;Ranges from 00-c0
;		beq +
:		jmp .noseqbreak
;+
PL_TICKCOUNTER = *+1
        ldy #0
;        beq .tick00
        bne +
        jmp .tick00
+
        dec PL_TICKCOUNTER
        cpy #3
        beq .tick03_checkpretrig
        jmp .noseqparse

.tick03_checkpretrig:

            ;CHECK IF IT IS TIME TO FETCH NEW SEQUENCE POINTERS
            
            ;Time to fetch new sequence pointers

			;Fetch pointer for chn00
			ldy PL_ZP_CHN00_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn00_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN00
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN00+1
			inc PL_ZP_CHN00_SONGPOS	;Bump

			;Fetch pointer for chn01
			ldy PL_ZP_CHN01_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn01_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN01
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN01+1
			inc PL_ZP_CHN01_SONGPOS	;Bump

			;Fetch pointer for chn02
			ldy PL_ZP_CHN02_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn02_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN02
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN02+1
			inc PL_ZP_CHN02_SONGPOS	;Bump

			;Fetch pointer for chn03
			ldy PL_ZP_CHN03_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn03_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN03
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN03+1
			inc PL_ZP_CHN03_SONGPOS	;Bump

			;Fetch pointer for chn04
			ldy PL_ZP_CHN04_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn04_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN04
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN04+1
			inc PL_ZP_CHN04_SONGPOS	;Bump

			;Fetch pointer for chn05
			ldy PL_ZP_CHN05_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn05_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN05
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN05+1
			inc PL_ZP_CHN05_SONGPOS	;Bump

			;Fetch pointer for chn06
			ldy PL_ZP_CHN06_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn06_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN06
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN06+1
			inc PL_ZP_CHN06_SONGPOS	;Bump

			;Fetch pointer for chn07
			ldy PL_ZP_CHN07_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn07_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN07
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN07+1
			inc PL_ZP_CHN07_SONGPOS	;Bump

			;Fetch pointer for chn08
			ldy PL_ZP_CHN08_SONGPOS	;Allow separate song positions for each channel (like ableton live mode).
;			tya
;			jsr ed_printbyte
			lax pl_chn08_seqlist,y
			lda pl_seqptrs_lo,x
			sta PL_ZP_CHN08
			lda pl_seqptrs_hi,x
			sta PL_ZP_CHN08+1
			inc PL_ZP_CHN08_SONGPOS	;Bump

			;Clear seqbreakflag
;			lda #$c0	;There are ALWAYS 6*32 ticks/clocks in each sequence = compatible with SYNC24/MIDI SYNC
;			sta PL_ZP_TICKCOUNTER
            lda #6
            sta PL_TICKCOUNTER

.noseqbreak:
;---



        ;Pretrig (at tick03)
.tick03:
		;--------------------

        ;Pre-parse channel 00

        ;Pre-parse channel 01

        ;Pre-parse channel 02

        ;Pre-parse channel 03

        ;Pre-parse channel 04

        ;Pre-parse channel 05

        ;Pre-parse channel 06

        ;Pre-parse channel 07

        ;Pre-parse channel 08


		jmp .doneseqparse

        ;Seqparse (at tick00)
.tick00:
		;--------------------
        ;Parse channel 00
        dec PL_ZP_CHN00_DELAY
        bpl +
            ldy PL_ZP_CHN00_SEQPOS
            lda (PL_ZP_CHN00),y	;Read control byte
            sta $0400+2*40+00
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 01
        dec PL_ZP_CHN01_DELAY
        bpl +
            ldy PL_ZP_CHN01_SEQPOS
            lda (PL_ZP_CHN01),y	;Read control byte
            sta $0400+2*40+01
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 02
        dec PL_ZP_CHN02_DELAY
        bpl +
            ldy PL_ZP_CHN02_SEQPOS
            lda (PL_ZP_CHN02),y	;Read control byte
            sta $0400+2*40+02
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 03
        dec PL_ZP_CHN03_DELAY
        bpl +
            ldy PL_ZP_CHN03_SEQPOS
            lda (PL_ZP_CHN03),y	;Read control byte
            sta $0400+2*40+03
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 04
        dec PL_ZP_CHN04_DELAY
        bpl +
            ldy PL_ZP_CHN04_SEQPOS
            lda (PL_ZP_CHN04),y	;Read control byte
            sta $0400+2*40+04
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 05
        dec PL_ZP_CHN05_DELAY
        bpl +
            ldy PL_ZP_CHN05_SEQPOS
            lda (PL_ZP_CHN05),y	;Read control byte
            sta $0400+2*40+05
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 06
        dec PL_ZP_CHN06_DELAY
        bpl +
            ldy PL_ZP_CHN06_SEQPOS
            lda (PL_ZP_CHN06),y	;Read control byte
            sta $0400+2*40+06
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 07
        dec PL_ZP_CHN07_DELAY
        bpl +
            ldy PL_ZP_CHN07_SEQPOS
            lda (PL_ZP_CHN07),y	;Read control byte
            sta $0400+2*40+07
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
		;--------------------
        ;Parse channel 08
        dec PL_ZP_CHN08_DELAY
        bpl +
            ldy PL_ZP_CHN08_SEQPOS
            lda (PL_ZP_CHN08),y	;Read control byte
            sta $0400+2*40+08
+
        ;OBS: Det måste finnas något sätt att skippa steps i traxxet
        
        
.doneseqparse:
.noseqparse:

		rts
		;---


;============================
pl_init:
        ;FIRST: Clear all ZP variables
        ldy #PL_ZP_END-PL_ZP_START
        lda #0
-       sta PL_ZP_START-1,y
        dey
        bne -

        ;THEN: Ensure that the first step is executed at once 
		lda #1
		sta PL_ZP_TICKCOUNTER
                
        rts
		;---


